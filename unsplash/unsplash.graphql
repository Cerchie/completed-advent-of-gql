"""
unsplash links type
"""
type Unsplash_Links {
  followers: String
  following: String
  html: String
  likes: String
  photos: String
  portfolio: String
  self: String
}

"""
unsplash meta type
"""
type Unsplash_Meta {
  index: Boolean
}

"""
unsplash profile image type
"""
type Unsplash_Profile_Image {
  large: String
  medium: String
  small: String
}

"""
unsplash social type
"""
type Unsplash_Social {
  instagram_username: String
  paypal_email: String
  portfolio_url: String
  twitter_username: String
}

"""
unsplash tags type
"""
type Unsplash_Tags {
  aggregated: JSON
  custom: JSON
}

"""
unsplash users type
"""
type Unsplash_Users {
  accepted_tos: Boolean
  allow_messages: Boolean
  badge: ID
  bio: ID
  downloads: Int
  first_name: String
  followed_by_user: Boolean
  followers_count: Int
  following_count: Int
  for_hire: Boolean
  id: String
  instagram_username: String
  last_name: String
  links: Unsplash_Links
  location: ID
  meta: Unsplash_Meta
  name: String
  numeric_id: Int
  photos: JSON
  portfolio_url: ID
  profile_image: Unsplash_Profile_Image
  social: Unsplash_Social
  tags: Unsplash_Tags
  total_collections: Int
  total_likes: Int
  total_photos: Int
  twitter_username: String
  updated_at: DateTime
  username: String
}

type Query {
  """
  query to retrieve user by id
  """
  unsplash_Users(username: String!): Unsplash_Users
    @rest(
      endpoint: "https://api.unsplash.com/users/$username"
      headers: [
        { name: "Authorization", value: "Client-ID $unsplash_clientId" }
      ]
      configuration: "unsplash_config"
    )
}

"""
unsplash users portfolio type
"""
type Unsplash_Users_Portfolio {
  url: String
}

type Query {
  """
  query to receive a user's portfolio
  """
  unsplash_Users_Portfolio(username: String!): Unsplash_Users_Portfolio
    @rest(
      endpoint: "https://api.unsplash.com/users/$username/portfolio"
      headers: [
        { name: "Authorization", value: "Client-ID $unsplash_clientId" }
      ]
      configuration: "unsplash_config"
    )
}

"""
sponsor type
"""
type Unsplash_Sponsor {
  accepted_tos: Boolean
  bio: String
  first_name: String
  for_hire: Boolean
  id: String
  instagram_username: String
  last_name: ID
  links: Unsplash_Links
  location: ID
  name: String
  portfolio_url: String
  profile_image: Unsplash_Profile_Image
  social: Unsplash_Social
  total_collections: Int
  total_likes: Int
  total_photos: Int
  twitter_username: String
  updated_at: DateTime
  username: String
}

"""
sponsorship type
"""
type Unsplash_Sponsorship {
  impression_urls: JSON
  sponsor: Unsplash_Sponsor
  tagline: String
  tagline_url: String
}

"""
urls type
"""
type Unsplash_Urls {
  full: String
  raw: String
  regular: String
  small: String
  thumb: String
}

"""
type User
"""
type Unsplash_User {
  accepted_tos: Boolean
  bio: String
  first_name: String
  for_hire: Boolean
  id: String
  instagram_username: String
  last_name: String
  links: Unsplash_Links
  location: String
  name: String
  portfolio_url: String
  profile_image: Unsplash_Profile_Image
  social: Unsplash_Social
  total_collections: Int
  total_likes: Int
  total_photos: Int
  twitter_username: String
  updated_at: DateTime
  username: String
}

"""
unsplash photo type
"""
type Unsplash_Photo {
  alt_description: String
  blur_hash: String
  categories: JSON
  color: String
  created_at: DateTime
  current_user_collections: JSON
  description: ID
  height: Int
  id: String
  liked_by_user: Boolean
  likes: Int
  links: Unsplash_Links
  promoted_at: ID
  sponsorship: Unsplash_Sponsorship
  updated_at: DateTime
  urls: Unsplash_Urls
  user: Unsplash_User
  width: Int
}

type Query {
  """
  query retrieving photos
  """
  unsplash_Photos: [Unsplash_Photo]
    @rest(
      endpoint: "https://api.unsplash.com/photos"
      headers: [
        { name: "Authorization", value: "Client-ID $unsplash_clientId" }
      ]
      configuration: "unsplash_config"
    )
}

"""
user photo type
"""
type Unsplash_User_Photo {
  alt_description: String
  blur_hash: String
  categories: JSON
  color: String
  created_at: DateTime
  current_user_collections: JSON
  description: ID
  height: Int
  id: String
  liked_by_user: Boolean
  likes: Int
  links: Unsplash_Links
  promoted_at: ID
  sponsorship: ID
  updated_at: DateTime
  urls: Unsplash_Urls
  user: Unsplash_User
  width: Int
}

type Query {
  """
  query to retrieve a user's photos
  """
  unsplash_User_Photos(username: String!): [Unsplash_User_Photo]
    @rest(
      endpoint: "https://api.unsplash.com/users/$username/photos"
      headers: [
        { name: "Authorization", value: "Client-ID $unsplash_clientId" }
      ]
      configuration: "unsplash_config"
    )
}

"""
user like type
"""
type Unsplash_User_Like {
  alt_description: String
  blur_hash: String
  categories: JSON
  color: String
  created_at: DateTime
  current_user_collections: JSON
  description: String
  height: Int
  id: String
  liked_by_user: Boolean
  likes: Int
  links: Unsplash_Links
  promoted_at: DateTime
  sponsorship: ID
  updated_at: DateTime
  urls: Unsplash_Urls
  user: Unsplash_User
  width: Int
}

type Query {
  """
  query to retrive user likes
  """
  unsplash_User_Likes(username: String!): [Unsplash_User_Like]
    @rest(
      endpoint: "https://api.unsplash.com/users/$username/likes"
      headers: [
        { name: "Authorization", value: "Client-ID $unsplash_clientId" }
      ]
      configuration: "unsplash_config"
    )
}

"""
user collection type
"""
type Unsplash_User_Collection {
  cover_photo: ID
  curated: Boolean
  description: ID
  featured: Boolean
  id: String
  last_collected_at: DateTime
  links: Unsplash_Links
  preview_photos: ID
  private: Boolean
  published_at: DateTime
  share_key: String
  tags: JSON
  title: String
  total_photos: Int
  updated_at: DateTime
  user: Unsplash_User
}

type Query {
  """
  query retrieving a user's collections
  """
  unsplash_User_Collections(username: String!): [Unsplash_User_Collection]
    @rest(
      endpoint: "https://api.unsplash.com/users/$username/collections"
      headers: [
        { name: "Authorization", value: "Client-ID $unsplash_clientId" }
      ]
      configuration: "unsplash_config"
    )
}

"""
value type
"""
type Unsplash_Value {
  date: String
  value: Int
}

"""
historical type
"""
type Unsplash_Historical {
  average: Int
  change: Int
  quantity: Int
  resolution: String
  values: [Unsplash_Value]
}

"""
downloads type
"""
type Unsplash_Downloads {
  historical: Unsplash_Historical
  total: Int
}

"""
views type
"""
type Unsplash_Views {
  historical: Unsplash_Historical
  total: Int
}

"""
user statistics type
"""
type Unsplash_User_Statistics {
  downloads: Unsplash_Downloads
  id: String
  username: String
  views: Unsplash_Views
}

type Query {
  """
  query to retrieve user statistics
  """
  unsplash_User_Statistics(username: String!): Unsplash_User_Statistics
    @rest(
      endpoint: "https://api.unsplash.com/users/$username/statistics"
      headers: [
        { name: "Authorization", value: "Client-ID $unsplash_clientId" }
      ]
      configuration: "unsplash_config"
    )
}

"""
exif type
"""
type Unsplash_Exif {
  aperture: ID
  exposure_time: ID
  focal_length: ID
  iso: ID
  make: ID
  model: ID
}

"""
position type
"""
type Unsplash_Position {
  latitude: ID
  longitude: ID
}

"""
location type
"""
type Unsplash_Location {
  city: ID
  country: ID
  name: ID
  position: Unsplash_Position
  title: ID
}

"""
type preview photo
"""
type Unsplash_Preview_Photo {
  blur_hash: String
  created_at: DateTime
  id: String
  updated_at: DateTime
  urls: Unsplash_Urls
}

"""
type result
"""
type Unsplash_Result {
  cover_photo: Unsplash_Cover_Photo
  curated: Boolean
  description: ID
  featured: Boolean
  id: String
  last_collected_at: DateTime
  links: Unsplash_Links
  preview_photos: [Unsplash_Preview_Photo]
  private: Boolean
  published_at: DateTime
  share_key: String
  tags: [Unsplash_Tag]
  title: String
  total_photos: Int
  updated_at: DateTime
  user: Unsplash_User
}

"""
type related collections
"""
type Unsplash_Related_Collections {
  results: [Unsplash_Result]
  total: Int
  type: String
}

"""
type category
"""
type Unsplash_Category {
  pretty_slug: String
  slug: String
}

"""
type type
"""
type Unsplash_Type {
  pretty_slug: String
  slug: String
}

"""
type source
"""
type Unsplash_Source {
  ancestry: Unsplash_Ancestry
  cover_photo: Unsplash_Cover_Photo
  description: String
  meta_description: String
  meta_title: String
  subtitle: String
  title: String
}

"""
type cover photo
"""
type Unsplash_Cover_Photo {
  alt_description: String
  blur_hash: String
  categories: JSON
  color: String
  created_at: DateTime
  current_user_collections: JSON
  description: String
  height: Int
  id: String
  liked_by_user: Boolean
  likes: Int
  links: Unsplash_Links
  promoted_at: DateTime
  sponsorship: String
  updated_at: DateTime
  urls: Unsplash_Urls
  user: Unsplash_User
  width: Int
}

"""
type onetags preview
"""
type Unsplash_OneTags_Preview {
  source: Unsplash_Source
  title: String
  type: String
}

"""
type unsplash photo
"""
type Unsplash_Photo_For_Query {
  alt_description: String
  blur_hash: String
  categories: JSON
  color: String
  created_at: DateTime
  current_user_collections: JSON
  description: ID
  downloads: Int
  exif: Unsplash_Exif
  height: Int
  id: String
  liked_by_user: Boolean
  likes: Int
  links: Unsplash_Links
  location: Unsplash_Location
  meta: Unsplash_Meta
  promoted_at: ID
  related_collections: Unsplash_Related_Collections
  sponsorship: ID
  tags: [Unsplash_Tag]
  tags_preview: [Unsplash_OneTags_Preview]
  topics: JSON
  updated_at: DateTime
  urls: Unsplash_Urls
  user: Unsplash_User
  views: Int
  width: Int
}

type Query {
  """
  returns information on Unsplash Photos
  """
  unsplash_Photo(
    photo_id: String!
    unsplash_clientId: Secret!
  ): Unsplash_Photo_For_Query
    @rest(
      endpoint: "https://api.unsplash.com/photos/$photo_id"
      headers: [
        { name: "Authorization", value: "Client-ID $unsplash_clientId" }
      ]
      configuration: "unsplash_config"
    )
}

"""
unsplash random photo type
"""
type Unsplash_Random_Photo {
  alt_description: String
  blur_hash: String
  categories: JSON
  color: String
  created_at: DateTime
  current_user_collections: JSON
  description: String
  downloads: Int
  exif: Unsplash_Exif
  height: Int
  id: String
  liked_by_user: Boolean
  likes: Int
  links: Unsplash_Links
  location: Unsplash_Location
  promoted_at: DateTime
  sponsorship: ID
  updated_at: DateTime
  urls: Unsplash_Urls
  user: Unsplash_User
  views: Int
  width: Int
}

type Query {
  """
  query returns a random photo
  """
  unsplash_Random_Photo: Unsplash_Random_Photo
    @rest(
      endpoint: "https://api.unsplash.com/photos/random"
      headers: [
        { name: "Authorization", value: "Client-ID $unsplash_clientId" }
      ]
      configuration: "unsplash_config"
    )
}

"""
type likes
"""
type Unsplash_Likes {
  historical: Unsplash_Historical
  total: Int
}

type Unsplash_Photo_Statistics {
  downloads: Unsplash_Downloads
  id: String
  likes: Unsplash_Likes
  views: Unsplash_Views
}

type Query {
  """
  query returns a photo's statistics by the id you enter
  """
  unsplash_Photo_Statistics(photo_id: String!): Unsplash_Photo_Statistics
    @rest(
      endpoint: "https://api.unsplash.com/photos/$photo_id/statistics"
      headers: [
        { name: "Authorization", value: "Client-ID $unsplash_clientId" }
      ]
      configuration: "unsplash_config"
    )
}

"""
type unsplash_photo_download
"""
type Unsplash_Photo_Download {
  url: String
}

type Query {
  """
  query to retrieve photo download tracking url
  """
  unsplash_Photo_Download(photo_id: ID!): Unsplash_Photo_Download
    @rest(
      endpoint: "https://api.unsplash.com/photos/$photo_id/download"
      headers: [
        { name: "Authorization", value: "Client-ID $unsplash_clientId" }
      ]
      configuration: "unsplash_config"
    )
}

"""
type unsplash search
"""
type Unsplash_Search {
  results: JSON
  total: Int
  total_pages: Int
}

type Query {
  """
  unsplash search query
  """
  unsplash_Search(
    order_by: String
    collections: String
    content_filter: String
    per_page: Int
    page: Int
    query: String!
    orientation: String
    color: String
  ): Unsplash_Search
    @rest(
      endpoint: "https://api.unsplash.com/search/photos"
      headers: [
        { name: "Authorization", value: "Client-ID $unsplash_clientId" }
      ]
      configuration: "unsplash_config"
    )
}

"""
type Unsplash_Search_Collections
"""
type Unsplash_Search_Collections {
  results: [Unsplash_Result]
  total: Int
  total_pages: Int
}

type Query {
  """
  query for searching collections
  """
  unsplash_Search_Collections(
    query: String!
    page: Int
    per_page: Int
  ): Unsplash_Search_Collections
    @rest(
      endpoint: "https://api.unsplash.com/search/collections"
      headers: [
        { name: "Authorization", value: "Client-ID $unsplash_clientId" }
      ]
      configuration: "unsplash_config"
    )
}

"""
type unsplash seach users
"""
type Unsplash_Search_Users {
  results: JSON
  total: Int
  total_pages: Int
}

type Query {
  """
  query retrieving info on users
  """
  unsplash_Search_Users(
    query: String!
    page: Int
    per_page: Int
  ): Unsplash_Search_Users
    @rest(
      endpoint: "https://api.unsplash.com/search/users"
      headers: [
        { name: "Authorization", value: "Client-ID $unsplash_clientId" }
      ]
      configuration: "unsplash_config"
    )
}

"""
type unsplash collection
"""
type Unsplash_Collection {
  cover_photo: Unsplash_Cover_Photo
  curated: Boolean
  description: String
  featured: Boolean
  id: String
  last_collected_at: DateTime
  links: Unsplash_Links
  preview_photos: [Unsplash_Preview_Photo]
  private: Boolean
  published_at: DateTime
  share_key: String
  tags: [Unsplash_Tag]
  title: String
  total_photos: Int
  updated_at: DateTime
  user: Unsplash_User
}

type Query {
  """
  query type for retrieving collections
  """
  unsplash_Collections: [Unsplash_Collection]
    @rest(
      endpoint: "https://api.unsplash.com/collections"
      headers: [
        { name: "Authorization", value: "Client-ID $unsplash_clientId" }
      ]
      configuration: "unsplash_config"
    )
}

"""
subcategory type
"""
type Unsplash_Subcategory {
  pretty_slug: String
  slug: String
}

"""
type Ancestry
"""
type Unsplash_Ancestry {
  category: Unsplash_Category
  subcategory: Unsplash_Subcategory
  type: Unsplash_Type
}

"""
type tag
"""
type Unsplash_Tag {
  source: Unsplash_Source
  title: String
  type: String
}

"""
type Unsplash_Collections_By_Id
"""
type Unsplash_Collections_By_Id {
  cover_photo: Unsplash_Cover_Photo
  curated: Boolean
  description: String
  featured: Boolean
  id: String
  last_collected_at: DateTime
  links: Unsplash_Links
  meta: Unsplash_Meta
  preview_photos: [Unsplash_Preview_Photo]
  private: Boolean
  published_at: DateTime
  share_key: String
  tags: [Unsplash_Tag]
  title: String
  total_photos: Int
  updated_at: DateTime
  user: Unsplash_User
}

type Query {
  """
  query retriving a collection by its id
  """
  unsplash_Collections_By_Id(
    collection_id: String!
  ): Unsplash_Collections_By_Id
    @rest(
      endpoint: "https://api.unsplash.com/collections/$collection_id"
      headers: [
        { name: "Authorization", value: "Client-ID $unsplash_clientId" }
      ]
      configuration: "unsplash_config"
    )
}

"""
type One_Unsplash_collections_by_id
"""
type Unsplash_One_Unsplash_Collections_By_Id {
  alt_description: String
  blur_hash: String
  categories: JSON
  color: String
  created_at: DateTime
  current_user_collections: JSON
  description: ID
  height: Int
  id: String
  liked_by_user: Boolean
  likes: Int
  links: Unsplash_Links
  promoted_at: DateTime
  sponsorship: ID
  updated_at: DateTime
  urls: Unsplash_Urls
  user: Unsplash_User
  width: Int
}

type Query {
  """
  query retrieving collections' photos by id
  """
  unsplash_Collections_Photos_By_Id(
    collection_id: String
  ): [Unsplash_One_Unsplash_Collections_By_Id]
    @rest(
      endpoint: "https://api.unsplash.com/collections/$collection_id/photos"
      headers: [
        { name: "Authorization", value: "Client-ID $unsplash_clientId" }
      ]
      configuration: "unsplash_config"
    )
}

"""
type One_Unsplash_related_collections_by_id
"""
type Unsplash_One_Unsplash_Related_Collections_By_Id {
  cover_photo: Unsplash_Cover_Photo
  curated: Boolean
  description: ID
  featured: Boolean
  id: String
  last_collected_at: DateTime
  links: Unsplash_Links
  preview_photos: [Unsplash_Preview_Photo]
  private: Boolean
  published_at: DateTime
  share_key: String
  tags: [Unsplash_Tag]
  title: String
  total_photos: Int
  updated_at: DateTime
  user: Unsplash_User
}

type Query {
  """
  query returning related collections by collection id
  """
  unsplash_Related_Collections_By_Id(
    collection_id: String!
  ): [Unsplash_One_Unsplash_Related_Collections_By_Id]
    @rest(
      endpoint: "https://api.unsplash.com/collections/$collection_id/related"
      headers: [
        { name: "Authorization", value: "Client-ID $unsplash_clientId" }
      ]
      configuration: "unsplash_config"
    )
}

"""
type Owner
"""
type Unsplash_Owner {
  accepted_tos: Boolean
  bio: String
  first_name: String
  for_hire: Boolean
  id: String
  instagram_username: String
  last_name: ID
  links: Unsplash_Links
  location: String
  name: String
  portfolio_url: String
  profile_image: Unsplash_Profile_Image
  social: Unsplash_Social
  total_collections: Int
  total_likes: Int
  total_photos: Int
  twitter_username: String
  updated_at: DateTime
  username: String
}

"""
type One_Unsplash_Related_Collections_By_Id
"""
type Unsplash_One_Unsplash_Topics {
  cover_photo: Unsplash_Cover_Photo
  current_user_contributions: JSON
  description: String
  ends_at: ID
  featured: Boolean
  id: String
  links: Unsplash_Links
  only_submissions_after: ID
  owners: [Unsplash_Owner]
  preview_photos: [Unsplash_Preview_Photo]
  published_at: DateTime
  slug: String
  starts_at: DateTime
  status: String
  title: String
  total_current_user_submissions: ID
  total_photos: Int
  updated_at: DateTime
}

type Query {
  """
  query to retrieve unsplash topics
  """
  unsplash_Topics(
    page: Int
    per_page: Int
    order_by: String
  ): [Unsplash_One_Unsplash_Topics]
    @rest(
      endpoint: "https://api.unsplash.com/topics"
      headers: [
        { name: "Authorization", value: "Client-ID $unsplash_clientId" }
      ]
      configuration: "unsplash_config"
    )
}

"""
type Top_contributor
"""
type Unsplash_Top_Contributor {
  accepted_tos: Boolean
  bio: String
  first_name: String
  for_hire: Boolean
  id: String
  instagram_username: String
  last_name: String
  links: Unsplash_Links
  location: String
  name: String
  portfolio_url: String
  profile_image: Unsplash_Profile_Image
  social: Unsplash_Social
  total_collections: Int
  total_likes: Int
  total_photos: Int
  twitter_username: ID
  updated_at: DateTime
  username: String
}

"""
type Unsplash_Topics_By_Id_Or_Slug
"""
type Unsplash_Topics_By_Id_Or_Slug {
  cover_photo: Unsplash_Cover_Photo
  current_user_contributions: JSON
  description: String
  ends_at: ID
  featured: Boolean
  id: String
  links: Unsplash_Links
  only_submissions_after: ID
  owners: [Unsplash_Owner]
  preview_photos: [Unsplash_Preview_Photo]
  published_at: DateTime
  slug: String
  starts_at: DateTime
  status: String
  title: String
  top_contributors: [Unsplash_Top_Contributor]
  total_current_user_submissions: ID
  total_photos: Int
  updated_at: DateTime
}

type Query {
  """
  query returning topics by id or slug
  """
  unsplash_Topics_By_Id_Or_Slug(
    id_or_slug: String!
  ): Unsplash_Topics_By_Id_Or_Slug
    @rest(
      endpoint: "https://api.unsplash.com/topics/$id_or_slug"
      headers: [
        { name: "Authorization", value: "Client-ID $unsplash_clientId" }
      ]
      configuration: "unsplash_config"
    )
}

"""
type One_Unsplash_Topics_Photos_By_Id_Or_Slug
"""
type Unsplash_One_Unsplash_Topics_Photos_By_Id_Or_Slug {
  alt_description: String
  blur_hash: String
  categories: JSON
  color: String
  created_at: DateTime
  current_user_collections: JSON
  description: ID
  height: Int
  id: String
  liked_by_user: Boolean
  likes: Int
  links: Unsplash_Links
  promoted_at: DateTime
  sponsorship: ID
  updated_at: DateTime
  urls: Unsplash_Urls
  user: Unsplash_User
  width: Int
}

type Query {
  """
  query retrieving topics' photos by id/slug
  """
  unsplash_Topics_Photos_By_Id_Or_Slug(
    id_or_slug: String!
  ): [Unsplash_One_Unsplash_Topics_Photos_By_Id_Or_Slug]
    @rest(
      endpoint: "https://api.unsplash.com/topics/$id_or_slug/photos"
      headers: [
        { name: "Authorization", value: "Client-ID $unsplash_clientId" }
      ]
      configuration: "unsplash_config"
    )
}

"""
type Unsplash_Stats
"""
type Unsplash_Stats {
  applications: Int
  developers: Int
  downloads: Int
  downloads_per_second: Int
  photo_downloads: Int
  photographers: Int
  photos: Int
  pixels: Int
  requests: Int
  total_photos: Int
  views: Int
  views_per_second: Int
}

type Query {
  """
  query retrieving total stats for unsplash
  """
  unsplash_Stats: Unsplash_Stats
    @rest(
      endpoint: "https://api.unsplash.com/stats/total"
      headers: [
        { name: "Authorization", value: "Client-ID $unsplash_clientId" }
      ]
      configuration: "unsplash_config"
    )
}

"""
type Unsplash_Stats_Month
"""
type Unsplash_Stats_Month {
  downloads: Int
  new_applications: Int
  new_developers: Int
  new_photographers: Int
  new_photos: Int
  new_pixels: Int
  new_requests: Int
  views: Int
}

type Query {
  """
  query retrieving unsplash stats for the month
  """
  unsplash_Stats_Month: Unsplash_Stats_Month
    @rest(
      endpoint: "https://api.unsplash.com/stats/month"
      headers: [
        { name: "Authorization", value: "Client-ID $unsplash_clientId" }
      ]
      configuration: "unsplash_config"
    )
}
